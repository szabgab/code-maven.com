=title Git
=timestamp 2018-04-06T18:30:01
=indexes git
=status show
=books git
=author szabgab
=archive 1
=show_related 0
=comments_disqus_enable 0

=abstract start

Two series of slides: <a href="/slides/git-intro/">Introduction to Git</a> and <a href="/slides/git">Using Git</a>.
The first is new, the second is more detailed. Then follow by <a href="/slides/collab-dev/">Collaborative Development and Open Source Projects</a>.

You can also buy the book: <a href="https://leanpub.com/collab-dev-git/">Collaborative Development using Git and GitHub</a>.

=abstract end

<h2>Collab dev series</h2>

<ul>
    <li><a href="/create-github-account">Create an account on GitHub</a></li>
</ul>

<h2>The Git series</h2>

<ul>
   <li><a href="/git-stash">git stash</a></li>
   <li><a href="/git-workflow-for-individuals">Git workflow for individuals</a></li>
   <li><a href="/git-config">git config</a></li>
   <li><a href="/start-git-with-a-local-repository">Start Git with a local repository</a></li>
</ul>

<h2>Git on MS Windows</h2>

<a href="/git-on-windows">Git on Windows series</a>

<h2>Other articles</h2>

<ul>
   <li><a href="/github-pull-requests-waiting-for-me">Filtering GitHub pull requests waiting for me</a></li>
   <li><a href="/coverall-with-python-minimal-setup">Minimal setup for Coverage report at Coveralls for Python projects hosted on GitHub</a></li>
   <li><a href="/why-is-git-better-than-subversion-for-open-source-projects">Why Git is better than Subversion for Open Source Projects</a></li>
   <li><a href="/merge-one-commit-from-a-pull-request">Merge only one commit from a Pull-request on GitHub</a></li>
</ul>



<h2>Getting Help for Git</h2>

Besides just typing your question in your favorite search engine, there are several places right on your command-line
that can provide you help with the commands of git.

<code>
$ git help             # listing the most important commands
$ git help COMMAND     # man page or local web page
$ git COMMAND --help   # the same

$ git help help        # help about the help system
$ git help --all       # list all the git commands
$ git help tutorial    # a simple git tutorial
</code>



<h2>Creating a local Git repository</h2>

The power of Git comes from two main sources. Its local capabilities and its networking capabilities.

The local capabilities give you a superb version control tool. The networking capabilities allow you
to collaborate with others at ease.

Let's take a look at the local capabilities.

As mentioned earlier we are going to use the command line.

Open your terminal. Navigate to a directory where you keep your projects.

For example use a directory called "projects" and inside that directory create a subdirectory for each one of your projects.

On Linux or OSX:

<code>
cd
mkdir projects
cd projects
mkdir try-git
cd try-git
</code>

On Windows it is almost the same, except that we put the "projects" directory in the root of the c:

<code>
cd /c/
mkdir projects
cd projects
mkdir try-git
cd try-git
</code>


<h2>Initialize git in the current directory</h2>

Type in the following command:

<code>
git init
</code>

The response will be something like this with the full path of the directory on your system.

<code>
Initialized empty Git repository in /Users/gabor/projects/try-git/.git/
</code>

This command created a directory called <hl>.git</hl> (with a leading dot) that contains the "database" of Git. In general you should not change anything in that directory manually.

Using the <hl>ls</hl> command with the appropriate flags we can see that this is the only item in our directory.

<code>
$  ls -Al
total 0
drwxr-xr-x  9 gabor  staff  288 Apr  6 18:19 .git
</code>

<h2>How to get the most recent tag in a tag series?</h2>

Let's say a build process tags each commit that was used by a build and puts the build number on that tag.
e.g. use tags like <b>build-42</b>

How do we get the most recent one?

Update the local git repository:

<code>
git checkout master
git pull
</code>

List the 5 most recent build- tags:

<code>
git tag -l 'build-*' | tail -5
</code>

The same with full sha:

<code>
git tag -l 'build-*' --format '%(refname:strip=2) %(objectname)' | tail -5
</code>

The same with short sha:

<code>
git tag -l 'build-*' --format '%(refname:strip=2) %(objectname:short)' | tail -f
</code>


<h2>git commits on one branch but not on another branch</h2>

<code>
git log one --not another
</code>

